package com.nyx.shell.util;

import com.nyx.shell.ShellLexer;
import org.antlr.v4.runtime.*;
import java.util.ArrayList;
import java.util.List;

/**
 * A utility class that uses ANTLR to tokenize shell input.
 *
 * <p>This class leverages ANTLR's powerful lexer capabilities to split
 * shell input into tokens while handling single quotes, double quotes with escapes,
 * and unquoted words. ANTLR (Another Tool for Language Recognition) is a popular parser generator
 * used to build language parsers from grammars. For more information, see:
 * <ul>
 *   <li><a href="https://www.antlr.org/">ANTLR Official Website</a></li>
 *   <li><a href="https://github.com/antlr/antlr4">ANTLR4 GitHub Repository</a></li>
 * </ul>
 * </p>
 *
 * <p>The Shell.g4 grammar (see the ANTLR documentation) defines tokens for:
 * <ul>
 *   <li><b>SQ_STRING</b>: Single-quoted strings (literal values).</li>
 *   <li><b>DQ_STRING</b>: Double-quoted strings with escape sequences (supports \\, \$, \").</li>
 *   <li><b>WORD</b>: Unquoted text (non-whitespace and non-quote characters).</li>
 *   <li><b>WS</b>: Whitespace, which is skipped.</li>
 * </ul>
 * </p>
 *
 * <p>For more details on shell quoting, see:
 * <a href="https://www.gnu.org/software/bash/manual/html_node/Quoting.html">Bash Quoting</a>.
 * </p>
 */
public class AntlrTokenizer {

    /**
     * Tokenizes the given input string using the ANTLR-generated ShellLexer.
     *
     * <p>This method creates a {@link CharStream} from the input, instantiates
     * a {@link ShellLexer} generated from the Shell.g4 grammar, and processes the tokens.
     * For single-quoted tokens, the surrounding quotes are removed. For double-quoted tokens,
     * the surrounding quotes are removed and escape sequences are unescaped.</p>
     *
     * @param input the raw input string from the user.
     * @return an array of tokens extracted from the input.
     */
    public static String[] tokenize(String input) {
        // Create a CharStream from the raw input.
        CharStream charStream = CharStreams.fromString(input);

        // Create a lexer instance using the generated ShellLexer.
        ShellLexer lexer = new ShellLexer(charStream);

        // Use CommonTokenStream to gather all tokens produced by the lexer.
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        tokens.fill();  // Load all tokens

        List<String> result = new ArrayList<>();

        // Process each token generated by ANTLR.
        for (Token token : tokens.getTokens()) {
            // Skip whitespace tokens.
            if (token.getType() == ShellLexer.WS) {
                continue;
            }
            String text = token.getText();
            int type = token.getType();

            // Process single-quoted strings: remove the surrounding quotes.
            if (type == ShellLexer.SQ_STRING) {
                // Remove the first and last character (the single quotes).
                text = text.substring(1, text.length() - 1);
            }
            // Process double-quoted strings: remove surrounding quotes and unescape escape sequences.
            else if (type == ShellLexer.DQ_STRING) {
                // Remove the surrounding double quotes.
                text = text.substring(1, text.length() - 1);
                // Unescape sequences (e.g., \" becomes ").
                text = unescapeDoubleQuoted(text);
            }

            // Add the processed token to the result list.
            result.add(text);
        }
        return result.toArray(new String[0]);
    }

    /**
     * Unescapes escape sequences found in double-quoted tokens.
     *
     * <p>This method replaces escape sequences for double quotes, backslashes, and dollar signs.
     * For example, it converts {@code \"} to {@code "}, {@code \\} to {@code \}, and {@code \$} to {@code $}.
     * For more information on shell escaping, see:
     * <a href="https://www.gnu.org/software/bash/manual/html_node/Quoting.html">Bash Quoting</a>.
     * </p>
     *
     * @param text the text within double quotes.
     * @return the text with escape sequences processed.
     */
    private static String unescapeDoubleQuoted(String text) {
        // Replace occurrences of \" \\ or \$ with their literal counterparts.
        return text.replaceAll("\\\\([\"\\\\$])", "$1");
    }
}
